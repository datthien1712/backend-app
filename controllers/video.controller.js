const Episode = require('../models/Episode');
const Movie = require('../models/Movie');
const cloudflareStreamService = require('../services/cloudflare-stream.service');

/**
 * üé¨ API c·∫•p Cloudflare Stream URL cho video streaming
 * GET /api/video-url/:videoId
 * 
 * videoId c√≥ th·ªÉ l√†:
 * - episode_id (cho phim b·ªô)
 * - movie_id (cho phim l·∫ª)
 */
const getVideoStreamUrl = async (req, res) => {
    try {
        const { videoId } = req.params;
        const { type = 'auto', quality = 'auto', format = 'auto' } = req.query;
        
        let videoData = null;
        let streamUid = null;
        let movieInfo = null;

        // üîç X√°c ƒë·ªãnh lo·∫°i video v√† l·∫•y th√¥ng tin
        if (type === 'episode' || type === 'auto') {
            // Th·ª≠ t√¨m episode tr∆∞·ªõc
            const episode = await Episode.findById(videoId)
                .populate('movie_id', 'movie_title is_free price movie_type');
            
            if (episode) {
                videoData = episode;
                movieInfo = episode.movie_id;
                
                // üé¨ L·∫•y Stream UID t·ª´ URI (thay v√¨ path)
                if (episode.uri) {
                    streamUid = extractStreamUid(episode.uri);
                }
            }
        }
        
        if (!videoData && (type === 'movie' || type === 'auto')) {
            // Th·ª≠ t√¨m movie (phim l·∫ª)
            const movie = await Movie.findById(videoId);
            if (movie) {
                movieInfo = movie;
                
                // V·ªõi phim l·∫ª, l·∫•y episode duy nh·∫•t
                const episode = await Episode.findOne({ movie_id: videoId });
                if (episode && episode.uri) {
                    videoData = episode;
                    streamUid = extractStreamUid(episode.uri);
                }
            }
        }

        // ‚úÖ Validate data
        if (!videoData || !movieInfo) {
            return res.status(404).json({
                status: 'error',
                message: 'Video kh√¥ng t·ªìn t·∫°i',
                code: 'VIDEO_NOT_FOUND'
            });
        }

        if (!streamUid) {
            return res.status(404).json({
                status: 'error',
                message: 'Stream UID kh√¥ng h·ª£p l·ªá ho·∫∑c video ch∆∞a ƒë∆∞·ª£c upload l√™n Cloudflare Stream',
                code: 'INVALID_STREAM_UID'
            });
        }

        // üîí Ki·ªÉm tra quy·ªÅn truy c·∫≠p (phim c√≥ ph√≠)
        if (!movieInfo.is_free && movieInfo.price > 0) {
            // TODO: Ki·ªÉm tra user ƒë√£ thanh to√°n ch∆∞a
            return res.status(403).json({
                status: 'error',
                message: 'Video n√†y y√™u c·∫ßu thanh to√°n',
                code: 'PAYMENT_REQUIRED',
                data: {
                    movieTitle: movieInfo.movie_title,
                    price: movieInfo.price,
                    priceDisplay: movieInfo.is_free ? 'Mi·ªÖn ph√≠' : `${movieInfo.price.toLocaleString('vi-VN')} VNƒê`
                }
            });
        }

        // üé• L·∫•y Stream URL t·ª´ Cloudflare Stream
        const streamData = await cloudflareStreamService.getStreamUrl(streamUid, {
            quality,
            format
        });

        // ‚ö†Ô∏è Ki·ªÉm tra tr·∫°ng th√°i video
        if (streamData.status !== 'ready') {
            return res.status(202).json({
                status: 'processing',
                message: streamData.message,
                code: 'VIDEO_PROCESSING',
                data: {
                    videoId,
                    streamUid,
                    status: streamData.status,
                    progress: streamData.progress,
                    movie: {
                        _id: movieInfo._id,
                        title: movieInfo.movie_title,
                        type: movieInfo.movie_type
                    }
                }
            });
        }

        // üé¨ Tr·∫£ v·ªÅ stream URLs
        return res.json({
            status: 'success',
            data: {
                videoId,
                streamUid,
                type: 'cloudflare-stream',
                movie: {
                    _id: movieInfo._id,
                    title: movieInfo.movie_title,
                    type: movieInfo.movie_type
                },
                episode: videoData._id !== movieInfo._id ? {
                    _id: videoData._id,
                    title: videoData.episode_title,
                    number: videoData.episode_number
                } : null,
                stream: {
                    // üì± URLs cho c√°c platform kh√°c nhau
                    urls: streamData.urls,
                    
                    // üéØ Recommended URLs d·ª±a tr√™n platform
                    recommended: streamData.recommended,
                    
                    // üñºÔ∏è Thumbnails v√† preview
                    thumbnail: streamData.urls.thumbnail,
                    preview: streamData.urls.preview,
                    
                    // üìä Metadata
                    duration: streamData.duration,
                    size: streamData.size,
                    created: streamData.created
                }
            }
        });

    } catch (error) {
        console.error('‚ùå Video streaming error:', error);
        
        // X·ª≠ l√Ω c√°c lo·∫°i l·ªói c·ª• th·ªÉ c·ªßa Cloudflare Stream
        if (error.message.includes('Cloudflare Stream configuration missing')) {
            return res.status(500).json({
                status: 'error',
                message: 'C·∫•u h√¨nh video streaming ch∆∞a ƒë·∫ßy ƒë·ªß',
                code: 'STREAMING_CONFIG_ERROR'
            });
        }
        
        if (error.message.includes('Video not found')) {
            return res.status(404).json({
                status: 'error',
                message: 'Video kh√¥ng t·ªìn t·∫°i trong Cloudflare Stream',
                code: 'STREAM_VIDEO_NOT_FOUND'
            });
        }

        return res.status(500).json({
            status: 'error',
            message: 'L·ªói khi l·∫•y ƒë∆∞·ªùng d·∫´n video t·ª´ Cloudflare Stream',
            code: 'STREAM_URL_GENERATION_ERROR',
            error: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
};

/**
 * üîÑ API l√†m m·ªõi Stream URL
 * POST /api/video-url/:videoId/refresh
 */
const refreshVideoStreamUrl = async (req, res) => {
    try {
        const { videoId } = req.params;
        
        // üîÑ G·ªçi l·∫°i h√†m getVideoStreamUrl v·ªõi logic t∆∞∆°ng t·ª±
        req.params.videoId = videoId;
        await getVideoStreamUrl(req, res);
        
    } catch (error) {
        console.error('‚ùå Refresh video URL error:', error);
        return res.status(500).json({
            status: 'error',
            message: 'L·ªói khi l√†m m·ªõi ƒë∆∞·ªùng d·∫´n video',
            code: 'REFRESH_URL_ERROR'
        });
    }
};

/**
 * üìä API ki·ªÉm tra tr·∫°ng th√°i video
 * GET /api/video-url/:videoId/status
 */
const getVideoStatus = async (req, res) => {
    try {
        const { videoId } = req.params;
        
        // üîç T√¨m video info
        let videoData = null;
        let movieInfo = null;
        let streamUid = null;
        
        // Th·ª≠ t√¨m episode
        const episode = await Episode.findById(videoId)
            .populate('movie_id', 'movie_title is_free price movie_type');
        
        if (episode) {
            videoData = episode;
            movieInfo = episode.movie_id;
            streamUid = extractStreamUid(episode.uri);
        } else {
            // Th·ª≠ t√¨m movie
            const movie = await Movie.findById(videoId);
            if (movie) {
                movieInfo = movie;
                const ep = await Episode.findOne({ movie_id: videoId });
                if (ep) {
                    videoData = ep;
                    streamUid = extractStreamUid(ep.uri);
                }
            }
        }

        if (!videoData || !movieInfo) {
            return res.status(404).json({
                status: 'error',
                message: 'Video kh√¥ng t·ªìn t·∫°i'
            });
        }

        const hasStreamUid = !!streamUid;
        const isAccessible = movieInfo.is_free || movieInfo.price === 0;
        
        // üìä L·∫•y chi ti·∫øt t·ª´ Cloudflare Stream n·∫øu c√≥ UID
        let streamDetails = null;
        if (hasStreamUid) {
            try {
                streamDetails = await cloudflareStreamService.getVideoDetails(streamUid);
            } catch (error) {
                console.log('Stream details not available:', error.message);
            }
        }

        return res.json({
            status: 'success',
            data: {
                videoId,
                streamUid,
                available: hasStreamUid,
                accessible: isAccessible,
                movie: {
                    _id: movieInfo._id,
                    title: movieInfo.movie_title,
                    type: movieInfo.movie_type,
                    is_free: movieInfo.is_free,
                    price: movieInfo.price
                },
                episode: videoData._id !== movieInfo._id ? {
                    _id: videoData._id,
                    title: videoData.episode_title,
                    number: videoData.episode_number
                } : null,
                stream: streamDetails ? {
                    status: streamDetails.status,
                    duration: streamDetails.duration,
                    size: streamDetails.size,
                    created: streamDetails.created,
                    modified: streamDetails.modified,
                    ready: streamDetails.status === 'ready'
                } : null,
                message: !hasStreamUid ? 'Video ch∆∞a ƒë∆∞·ª£c upload l√™n Cloudflare Stream' : 
                        !isAccessible ? 'Video y√™u c·∫ßu thanh to√°n' : 
                        streamDetails?.status === 'ready' ? 'Video s·∫µn s√†ng ƒë·ªÉ ph√°t' : 
                        'Video ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω'
            }
        });

    } catch (error) {
        console.error('‚ùå Get video status error:', error);
        return res.status(500).json({
            status: 'error',
            message: 'L·ªói khi ki·ªÉm tra tr·∫°ng th√°i video'
        });
    }
};

/**
 * üÜî Extract Stream UID t·ª´ URI
 * @param {string} uri - URI c√≥ th·ªÉ ch·ª©a Stream UID ho·∫∑c path c≈©
 * @returns {string|null} - Stream UID
 */
function extractStreamUid(uri) {
    if (!uri) return null;
    
    // üé¨ N·∫øu l√† Cloudflare Stream UID (format: 36 k√Ω t·ª± hex)
    if (uri.match(/^[a-f0-9]{32}$/i)) {
        return uri;
    }
    
    // üîó N·∫øu l√† URL ch·ª©a Stream UID
    if (uri.includes('cloudflarestream.com')) {
        const matches = uri.match(/cloudflarestream\.com\/([a-f0-9]{32})/i);
        return matches ? matches[1] : null;
    }
    
    // üìÅ Legacy: URI c√≥ th·ªÉ l√† path c≈©, c·∫ßn migration
    // Tr·∫£ v·ªÅ null ƒë·ªÉ b√°o hi·ªáu c·∫ßn upload l·∫°i
    console.warn('‚ö†Ô∏è Legacy video URI detected, needs migration to Cloudflare Stream:', uri);
    return null;
}

/**
 * üì∫ Get video embed HTML (t√πy ch·ªçn cho admin/preview)
 * GET /api/video-url/:videoId/embed
 */
const getVideoEmbed = async (req, res) => {
    try {
        const { videoId } = req.params;
        const { width = '100%', height = 'auto', autoplay = false } = req.query;
        
        // L·∫•y stream UID
        let streamUid = null;
        const episode = await Episode.findById(videoId);
        
        if (episode && episode.uri) {
            streamUid = extractStreamUid(episode.uri);
        } else {
            const movie = await Movie.findById(videoId);
            if (movie) {
                const ep = await Episode.findOne({ movie_id: videoId });
                if (ep && ep.uri) {
                    streamUid = extractStreamUid(ep.uri);
                }
            }
        }
        
        if (!streamUid) {
            return res.status(404).json({
                status: 'error',
                message: 'Stream UID kh√¥ng t·ªìn t·∫°i'
            });
        }
        
        const embedHTML = cloudflareStreamService.generateEmbedHTML(streamUid, {
            width,
            height,
            autoplay: autoplay === 'true'
        });
        
        return res.json({
            status: 'success',
            data: {
                videoId,
                streamUid,
                embedHTML,
                previewUrl: `https://customer-${process.env.CLOUDFLARE_ACCOUNT_ID}.cloudflarestream.com/${streamUid}`
            }
        });
        
    } catch (error) {
        console.error('‚ùå Get video embed error:', error);
        return res.status(500).json({
            status: 'error',
            message: 'L·ªói khi t·∫°o embed HTML'
        });
    }
};

module.exports = {
    getVideoStreamUrl,
    refreshVideoStreamUrl,
    getVideoStatus,
    getVideoEmbed
}; 