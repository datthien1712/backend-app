const Episode = require('../models/Episode');
const Movie = require('../models/Movie');
const cloudfrontService = require('../services/cloudfront.service');

/**
 * üé¨ API c·∫•p CloudFront Signed URL cho video streaming
 * GET /api/video-url/:videoId
 * 
 * videoId c√≥ th·ªÉ l√†:
 * - episode_id (cho phim b·ªô)
 * - movie_id (cho phim l·∫ª)
 */
const getVideoStreamUrl = async (req, res) => {
    try {
        const { videoId } = req.params;
        const { type = 'auto' } = req.query; // auto, episode, movie
        
        let videoData = null;
        let videoPath = null;
        let movieInfo = null;

        // X√°c ƒë·ªãnh lo·∫°i video v√† l·∫•y th√¥ng tin
        if (type === 'episode' || type === 'auto') {
            // Th·ª≠ t√¨m episode tr∆∞·ªõc
            const episode = await Episode.findById(videoId)
                .populate('movie_id', 'movie_title is_free price movie_type');
            
            if (episode) {
                videoData = episode;
                movieInfo = episode.movie_id;
                
                // L·∫•y video path t·ª´ URI (lo·∫°i b·ªè domain n·∫øu c√≥)
                if (episode.uri) {
                    videoPath = extractVideoPath(episode.uri);
                }
            }
        }
        
        if (!videoData && (type === 'movie' || type === 'auto')) {
            // Th·ª≠ t√¨m movie (phim l·∫ª)
            const movie = await Movie.findById(videoId);
            if (movie) {
                movieInfo = movie;
                
                // V·ªõi phim l·∫ª, l·∫•y episode duy nh·∫•t
                const episode = await Episode.findOne({ movie_id: videoId });
                if (episode && episode.uri) {
                    videoData = episode;
                    videoPath = extractVideoPath(episode.uri);
                }
            }
        }

        // Validate data
        if (!videoData || !movieInfo) {
            return res.status(404).json({
                status: 'error',
                message: 'Video kh√¥ng t·ªìn t·∫°i',
                code: 'VIDEO_NOT_FOUND'
            });
        }

        if (!videoPath) {
            return res.status(404).json({
                status: 'error',
                message: 'ƒê∆∞·ªùng d·∫´n video kh√¥ng h·ª£p l·ªá',
                code: 'INVALID_VIDEO_PATH'
            });
        }

        // Ki·ªÉm tra quy·ªÅn truy c·∫≠p (phim c√≥ ph√≠)
        if (!movieInfo.is_free && movieInfo.price > 0) {
            // TODO: Ki·ªÉm tra user ƒë√£ thanh to√°n ch∆∞a
            // T·∫°m th·ªùi return error cho phim c√≥ ph√≠
            return res.status(403).json({
                status: 'error',
                message: 'Video n√†y y√™u c·∫ßu thanh to√°n',
                code: 'PAYMENT_REQUIRED',
                data: {
                    movieTitle: movieInfo.movie_title,
                    price: movieInfo.price,
                    priceDisplay: movieInfo.is_free ? 'Mi·ªÖn ph√≠' : `${movieInfo.price.toLocaleString('vi-VN')} VNƒê`
                }
            });
        }

        // Validate video path format
        if (!cloudfrontService.isValidVideoPath(videoPath)) {
            return res.status(400).json({
                status: 'error',
                message: 'ƒê·ªãnh d·∫°ng video kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£',
                code: 'UNSUPPORTED_VIDEO_FORMAT'
            });
        }

        // T·∫°o signed URL
        let signedUrlData;
        
        if (videoPath.endsWith('.m3u8')) {
            // HLS stream - c·∫ßn signed URLs cho c·∫£ playlist v√† segments
            // T√≠nh th·ªùi gian h·∫øt h·∫°n t·ªëi ∆∞u cho HLS
            const videoType = movieInfo.movie_type === 'Phim l·∫ª' ? 'movie' : 'series';
            const optimalMinutes = cloudfrontService.calculateOptimalExpiration(videoType, videoData.duration);
            
            signedUrlData = cloudfrontService.generateHLSSignedUrls(videoPath, optimalMinutes);
            
            return res.json({
                status: 'success',
                data: {
                    videoId,
                    type: 'hls',
                    movie: {
                        _id: movieInfo._id,
                        title: movieInfo.movie_title,
                        type: movieInfo.movie_type
                    },
                    episode: videoData._id !== movieInfo._id ? {
                        _id: videoData._id,
                        title: videoData.episode_title,
                        number: videoData.episode_number
                    } : null,
                    stream: {
                        url: signedUrlData.playlistUrl,
                        cookies: signedUrlData.cookies,
                        expiration: signedUrlData.expiration,
                        expiresIn: `${optimalMinutes} minutes`
                    }
                }
            });
            
        } else {
            // Single video file (MP4, etc.)
            const videoType = movieInfo.movie_type === 'Phim l·∫ª' ? 'movie' : 'series';
            const optimalMinutes = cloudfrontService.calculateOptimalExpiration(videoType, videoData.duration);
            const signedUrl = cloudfrontService.generateSignedUrl(videoPath, optimalMinutes);
            
            return res.json({
                status: 'success',
                data: {
                    videoId,
                    type: 'single',
                    movie: {
                        _id: movieInfo._id,
                        title: movieInfo.movie_title,
                        type: movieInfo.movie_type
                    },
                    episode: videoData._id !== movieInfo._id ? {
                        _id: videoData._id,
                        title: videoData.episode_title,
                        number: videoData.episode_number
                    } : null,
                    stream: {
                        url: signedUrl,
                        expiration: new Date(Date.now() + optimalMinutes * 60 * 1000).toISOString(),
                        expiresIn: `${optimalMinutes} minutes`
                    }
                }
            });
        }

    } catch (error) {
        console.error('Video streaming error:', error);
        
        // X·ª≠ l√Ω c√°c lo·∫°i l·ªói c·ª• th·ªÉ
        if (error.message.includes('CloudFront configuration missing')) {
            return res.status(500).json({
                status: 'error',
                message: 'C·∫•u h√¨nh video streaming ch∆∞a ƒë·∫ßy ƒë·ªß',
                code: 'STREAMING_CONFIG_ERROR'
            });
        }
        
        if (error.message.includes('Failed to load CloudFront private key')) {
            return res.status(500).json({
                status: 'error',
                message: 'L·ªói c·∫•u h√¨nh b·∫£o m·∫≠t video',
                code: 'SECURITY_CONFIG_ERROR'
            });
        }

        return res.status(500).json({
            status: 'error',
            message: 'L·ªói khi t·∫°o ƒë∆∞·ªùng d·∫´n video',
            code: 'VIDEO_URL_GENERATION_ERROR',
            error: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
};

/**
 * üîÑ API l√†m m·ªõi Signed URL
 * POST /api/video-url/:videoId/refresh
 */
const refreshVideoStreamUrl = async (req, res) => {
    try {
        const { videoId } = req.params;
        
        // G·ªçi l·∫°i h√†m getVideoStreamUrl v·ªõi logic t∆∞∆°ng t·ª±
        req.params.videoId = videoId;
        await getVideoStreamUrl(req, res);
        
    } catch (error) {
        console.error('Refresh video URL error:', error);
        return res.status(500).json({
            status: 'error',
            message: 'L·ªói khi l√†m m·ªõi ƒë∆∞·ªùng d·∫´n video',
            code: 'REFRESH_URL_ERROR'
        });
    }
};

/**
 * üìä API ki·ªÉm tra tr·∫°ng th√°i video
 * GET /api/video-url/:videoId/status
 */
const getVideoStatus = async (req, res) => {
    try {
        const { videoId } = req.params;
        
        // T√¨m video info
        let videoData = null;
        let movieInfo = null;
        
        // Th·ª≠ t√¨m episode
        const episode = await Episode.findById(videoId)
            .populate('movie_id', 'movie_title is_free price movie_type');
        
        if (episode) {
            videoData = episode;
            movieInfo = episode.movie_id;
        } else {
            // Th·ª≠ t√¨m movie
            const movie = await Movie.findById(videoId);
            if (movie) {
                movieInfo = movie;
                const ep = await Episode.findOne({ movie_id: videoId });
                videoData = ep;
            }
        }

        if (!videoData || !movieInfo) {
            return res.status(404).json({
                status: 'error',
                message: 'Video kh√¥ng t·ªìn t·∫°i'
            });
        }

        const hasVideoFile = !!videoData.uri;
        const isAccessible = movieInfo.is_free || movieInfo.price === 0;
        const videoPath = hasVideoFile ? extractVideoPath(videoData.uri) : null;
        const isValidFormat = videoPath ? cloudfrontService.isValidVideoPath(videoPath) : false;

        return res.json({
            status: 'success',
            data: {
                videoId,
                available: hasVideoFile && isValidFormat,
                accessible: isAccessible,
                requiresPayment: !isAccessible,
                format: videoPath ? (videoPath.endsWith('.m3u8') ? 'hls' : 'single') : null,
                movie: {
                    _id: movieInfo._id,
                    title: movieInfo.movie_title,
                    type: movieInfo.movie_type,
                    price: movieInfo.price,
                    isFree: movieInfo.is_free
                }
            }
        });

    } catch (error) {
        console.error('Video status error:', error);
        return res.status(500).json({
            status: 'error',
            message: 'L·ªói khi ki·ªÉm tra tr·∫°ng th√°i video'
        });
    }
};

/**
 * Helper: Tr√≠ch xu·∫•t video path t·ª´ full URL
 * @param {string} uri - Full URL ho·∫∑c relative path
 * @returns {string} Relative video path
 */
function extractVideoPath(uri) {
    if (!uri) return null;
    
    // N·∫øu l√† full URL, extract path
    if (uri.startsWith('http://') || uri.startsWith('https://')) {
        try {
            const url = new URL(uri);
            return url.pathname.startsWith('/') ? url.pathname.substring(1) : url.pathname;
        } catch (error) {
            console.error('Invalid URL format:', uri);
            return null;
        }
    }
    
    // N·∫øu ƒë√£ l√† relative path
    return uri.startsWith('/') ? uri.substring(1) : uri;
}

module.exports = {
    getVideoStreamUrl,
    refreshVideoStreamUrl,
    getVideoStatus
}; 