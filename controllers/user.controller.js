const User = require('../models/User');
const { uploadToCloudflare, deleteFromCloudflare } = require('../utils/cloudflare.config');

// L·∫•y th√¥ng tin profile (userId t·ª´ query params)
exports.getProfile = async (req, res) => {
    try {
        const { userId } = req.query;
        
        if (!userId) {
            return res.status(400).json({
                status: 'error',
                message: 'userId l√† b·∫Øt bu·ªôc'
            });
        }

        const user = await User.findById(userId)
            .select('-__v');
        
        if (!user) {
            return res.status(404).json({
                status: 'error',
                message: 'Kh√¥ng t√¨m th·∫•y user'
            });
        }
        
        res.json({
            status: 'success',
            data: { 
                user: {
                    ...user.toObject(),
                    uid: user._id  // Th√™m UID cho frontend hi·ªÉn th·ªã
                }
            }
        });
    } catch (error) {
        console.error('Get profile error:', error);
        res.status(500).json({
            status: 'error',
            message: 'L·ªói khi l·∫•y th√¥ng tin profile'
        });
    }
};

// C·∫≠p nh·∫≠t profile (c√≥ th·ªÉ k√®m upload avatar)
exports.updateProfile = async (req, res) => {
    try {
        const { userId } = req.query;
        const { full_name, phone, gender } = req.body;
        
        console.log('üìù Update profile request:', {
            userId,
            full_name,
            phone,
            gender,
            hasFile: !!req.file
        });

        if (!userId) {
            return res.status(400).json({
                status: 'error',
                message: 'userId l√† b·∫Øt bu·ªôc'
            });
        }

        // T√¨m user hi·ªán t·∫°i
        const user = await User.findById(userId);
        if (!user) {
            return res.status(404).json({
                status: 'error',
                message: 'Kh√¥ng t√¨m th·∫•y user'
            });
        }

        const updateData = {};

        // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng th√¥ng tin
        if (full_name) updateData.full_name = full_name;
        if (phone) updateData.phone = phone;
        if (gender !== undefined) updateData.gender = gender;

        // X·ª≠ l√Ω upload avatar n·∫øu c√≥ file
        if (req.file) {
            try {
                console.log('üì§ Uploading avatar to Cloudflare:', {
                    originalname: req.file.originalname,
                    mimetype: req.file.mimetype,
                    size: req.file.size
                });

                // Upload file m·ªõi l√™n Cloudflare Images
                const imageData = await uploadToCloudflare(req.file, 'avatars', 'avatar');
                updateData.avatar = imageData.avatar; // S·ª≠ d·ª•ng avatar variant URL

                console.log('‚úÖ Avatar uploaded successfully to Cloudflare:', imageData.avatar);

                // X√≥a avatar c≈© n·∫øu c√≥
                if (user.avatar) {
                    console.log('üóëÔ∏è Deleting old avatar:', user.avatar);
                    await deleteFromCloudflare(user.avatar);
                }
            } catch (uploadError) {
                console.error('‚ùå Avatar upload error:', uploadError);
                return res.status(500).json({
                    status: 'error',
                    message: 'L·ªói khi upload avatar: ' + uploadError.message
                });
            }
        }

        // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i ch∆∞a
        if (phone) {
            const existingPhone = await User.findOne({ 
                phone, 
                _id: { $ne: userId } 
            });
            
            if (existingPhone) {
                return res.status(400).json({
                    status: 'error',
                    message: 'S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng'
                });
            }
        }

        // C·∫≠p nh·∫≠t user
        const updatedUser = await User.findByIdAndUpdate(
            userId,
            updateData,
            { new: true }
        ).select('-__v');

        console.log('‚úÖ User profile updated successfully');

        res.json({
            status: 'success',
            message: req.file ? 'C·∫≠p nh·∫≠t profile v√† avatar th√†nh c√¥ng' : 'C·∫≠p nh·∫≠t profile th√†nh c√¥ng',
            data: { 
                user: {
                    ...updatedUser.toObject(),
                    uid: updatedUser._id
                }
            }
        });

    } catch (error) {
        console.error('‚ùå Update profile error:', error);
        
        // X·ª≠ l√Ω l·ªói file qu√° l·ªõn
        if (error.code === 'LIMIT_FILE_SIZE') {
            return res.status(400).json({
                status: 'error',
                message: 'File qu√° l·ªõn. Vui l√≤ng ch·ªçn file nh·ªè h∆°n 2MB'
            });
        }

        res.status(500).json({
            status: 'error',
            message: error.message || 'L·ªói khi c·∫≠p nh·∫≠t profile'
        });
    }
}; 