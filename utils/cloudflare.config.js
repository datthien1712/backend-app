const axios = require('axios');
const FormData = require('form-data');
const multer = require('multer');
const { v4: uuidv4 } = require('uuid');

// üåê C·∫•u h√¨nh Cloudflare
const CLOUDFLARE_CONFIG = {
    // Cloudflare Images & Stream - CH·ªà C·∫¶N 2 BI·∫æN N√ÄY
    accountId: process.env.CLOUDFLARE_ACCOUNT_ID,
    apiToken: process.env.CLOUDFLARE_API_TOKEN,
    imagesApiUrl: `https://api.cloudflare.com/client/v4/accounts/${process.env.CLOUDFLARE_ACCOUNT_ID}/images/v1`,
    
    // Variants cho image optimization (public URLs)
    variants: {
        avatar: 'avatar',      // Avatar nh·ªè: 150x150
        thumbnail: 'thumb',    // Thumbnail: 300x300  
        medium: 'medium',      // Medium: 800x600
        original: 'public'     // Original size
    }
};

// üìÅ C·∫•u h√¨nh Multer cho file upload (memory storage)
const storage = multer.memoryStorage();

const fileFilter = (req, file, cb) => {
    // ‚úÖ Ch·ªâ cho ph√©p c√°c lo·∫°i file ·∫£nh
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
    
    if (allowedTypes.includes(file.mimetype)) {
        cb(null, true);
    } else {
        cb(new Error('Ch·ªâ cho ph√©p upload file ·∫£nh (jpeg, jpg, png, gif, webp)'), false);
    }
};

// üìä Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc file (5MB - cao h∆°n AWS v√¨ Cloudflare Images free tier h·ªó tr·ª£ t·ªët)
const upload = multer({
    storage: storage,
    fileFilter: fileFilter,
    limits: {
        fileSize: 5 * 1024 * 1024 // 5MB
    }
});

/**
 * üöÄ Upload ·∫£nh l√™n Cloudflare Images
 * @param {Object} file - File object t·ª´ multer
 * @param {string} folder - Folder name (metadata)
 * @param {string} variant - Image variant (avatar, thumbnail, medium, original)
 * @returns {Object} - Cloudflare Images response v·ªõi URLs
 */
const uploadToCloudflare = async (file, folder = 'avatars', variant = 'avatar') => {
    try {
        // üÜî T·∫°o unique ID cho file
        const fileId = `${folder}_${uuidv4()}`;
        
        // üìã T·∫°o FormData cho Cloudflare Images API
        const formData = new FormData();
        formData.append('file', file.buffer, {
            filename: file.originalname,
            contentType: file.mimetype
        });
        
        // üè∑Ô∏è Metadata cho file
        formData.append('metadata', JSON.stringify({
            folder: folder,
            originalName: file.originalname,
            uploadedAt: new Date().toISOString()
        }));
        
        // ‚öôÔ∏è C·∫•u h√¨nh request
        const response = await axios.post(CLOUDFLARE_CONFIG.imagesApiUrl, formData, {
            headers: {
                'Authorization': `Bearer ${CLOUDFLARE_CONFIG.apiToken}`,
                ...formData.getHeaders()
            }
        });

        if (response.data.success) {
            const imageData = response.data.result;
            
            // üîó T·∫°o URLs cho c√°c variant (PUBLIC - kh√¥ng c·∫ßn signature)
            const urls = {
                id: imageData.id,
                filename: imageData.filename,
                // Public URLs - truy c·∫≠p tr·ª±c ti·∫øp kh√¥ng c·∫ßn authentication
                original: `https://imagedelivery.net/${CLOUDFLARE_CONFIG.accountId}/${imageData.id}/public`,
                avatar: `https://imagedelivery.net/${CLOUDFLARE_CONFIG.accountId}/${imageData.id}/avatar`,
                thumbnail: `https://imagedelivery.net/${CLOUDFLARE_CONFIG.accountId}/${imageData.id}/thumb`,
                medium: `https://imagedelivery.net/${CLOUDFLARE_CONFIG.accountId}/${imageData.id}/medium`,
                uploaded: imageData.uploaded
            };
            
            console.log('‚úÖ Cloudflare Images upload success:', {
                id: imageData.id,
                folder: folder,
                variant: variant,
                size: file.size
            });
            
            return urls;
            
        } else {
            throw new Error(`Cloudflare API error: ${JSON.stringify(response.data.errors)}`);
        }
        
    } catch (error) {
        console.error('‚ùå Cloudflare Images upload error:', error);
        
        if (error.response) {
            console.error('Response data:', error.response.data);
            throw new Error(`Cloudflare upload failed: ${error.response.data.errors?.[0]?.message || error.message}`);
        }
        
        throw new Error('L·ªói khi upload ·∫£nh l√™n Cloudflare: ' + error.message);
    }
};

/**
 * üóëÔ∏è X√≥a ·∫£nh t·ª´ Cloudflare Images
 * @param {string} imageUrl - URL ho·∫∑c ID c·ªßa ·∫£nh
 */
const deleteFromCloudflare = async (imageUrl) => {
    try {
        if (!imageUrl) return;
        
        // üîç Extract image ID t·ª´ URL
        let imageId;
        if (imageUrl.includes('imagedelivery.net')) {
            // URL format: https://imagedelivery.net/ACCOUNT_ID/IMAGE_ID/variant
            const urlParts = imageUrl.split('/');
            imageId = urlParts[urlParts.length - 2]; // ID n·∫±m tr∆∞·ªõc variant
        } else {
            // Gi·∫£ s·ª≠ l√† image ID tr·ª±c ti·∫øp
            imageId = imageUrl;
        }
        
        if (!imageId) {
            console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ extract image ID t·ª´ URL:', imageUrl);
            return;
        }
        
        // üóëÔ∏è G·ªçi Cloudflare API ƒë·ªÉ x√≥a
        const response = await axios.delete(`${CLOUDFLARE_CONFIG.imagesApiUrl}/${imageId}`, {
            headers: {
                'Authorization': `Bearer ${CLOUDFLARE_CONFIG.apiToken}`
            }
        });
        
        if (response.data.success) {
            console.log(`‚úÖ Deleted image: ${imageId}`);
        } else {
            console.error('‚ùå Failed to delete image:', response.data.errors);
        }
        
    } catch (error) {
        console.error('‚ùå Cloudflare Images delete error:', error);
        // Kh√¥ng throw error ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn qu√° tr√¨nh ch√≠nh
    }
};

/**
 * üîç Test connection t·ªõi Cloudflare Images
 */
const testCloudflareConnection = async () => {
    try {
        // üìä Test b·∫±ng c√°ch l·∫•y th·ªëng k√™ usage
        const response = await axios.get(`https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_CONFIG.accountId}/images/v1/stats`, {
            headers: {
                'Authorization': `Bearer ${CLOUDFLARE_CONFIG.apiToken}`
            }
        });
        
        if (response.data.success) {
            console.log('‚úÖ Cloudflare Images connection successful');
            console.log('üìä Current usage:', {
                allowedCount: response.data.result.count.allowed,
                currentCount: response.data.result.count.current
            });
            return true;
        } else {
            throw new Error(JSON.stringify(response.data.errors));
        }
        
    } catch (error) {
        console.error('‚ùå Cloudflare Images connection failed:', error.message);
        return false;
    }
};

/**
 * üñºÔ∏è L·∫•y th√¥ng tin chi ti·∫øt c·ªßa ·∫£nh
 * @param {string} imageId - ID c·ªßa ·∫£nh
 */
const getImageDetails = async (imageId) => {
    try {
        const response = await axios.get(`${CLOUDFLARE_CONFIG.imagesApiUrl}/${imageId}`, {
            headers: {
                'Authorization': `Bearer ${CLOUDFLARE_CONFIG.apiToken}`
            }
        });
        
        if (response.data.success) {
            return response.data.result;
        } else {
            throw new Error(JSON.stringify(response.data.errors));
        }
        
    } catch (error) {
        console.error('‚ùå Get image details error:', error);
        throw new Error('L·ªói khi l·∫•y th√¥ng tin ·∫£nh: ' + error.message);
    }
};

/**
 * üìù L·∫•y danh s√°ch ·∫£nh (cho admin)
 * @param {number} page - Trang (default: 1)
 * @param {number} per_page - S·ªë l∆∞·ª£ng m·ªói trang (default: 50, max: 100)
 */
const listImages = async (page = 1, per_page = 50) => {
    try {
        const response = await axios.get(`${CLOUDFLARE_CONFIG.imagesApiUrl}`, {
            headers: {
                'Authorization': `Bearer ${CLOUDFLARE_CONFIG.apiToken}`
            },
            params: {
                page,
                per_page: Math.min(per_page, 100)
            }
        });
        
        if (response.data.success) {
            return response.data.result;
        } else {
            throw new Error(JSON.stringify(response.data.errors));
        }
        
    } catch (error) {
        console.error('‚ùå List images error:', error);
        throw new Error('L·ªói khi l·∫•y danh s√°ch ·∫£nh: ' + error.message);
    }
};

module.exports = {
    // üì§ Main functions
    upload,
    uploadToCloudflare,
    deleteFromCloudflare,
    testCloudflareConnection,
    
    // üîß Utility functions
    getImageDetails,
    listImages,
    
    // üìã Configuration
    CLOUDFLARE_CONFIG
}; 