const axios = require('axios');
const FormData = require('form-data');
const multer = require('multer');
const { v4: uuidv4 } = require('uuid');
const sharp = require('sharp');

// üåê C·∫•u h√¨nh Cloudflare
const CLOUDFLARE_CONFIG = {
    // Cloudflare Images & Stream - API Account cho qu·∫£n l√Ω
    accountId: process.env.CLOUDFLARE_ACCOUNT_ID || '8396e0173865666f8dae8dd32565efca',
    apiToken: process.env.CLOUDFLARE_API_TOKEN || '4Pc-8y5zXTGFfOPMaP8XQGxNbWA0c3hpxRGwKEO_',
    imagesApiUrl: `https://api.cloudflare.com/client/v4/accounts/${process.env.CLOUDFLARE_ACCOUNT_ID || '8396e0173865666f8dae8dd32565efca'}/images/v1`,
    
    // üîë Account Hash cho delivery URLs (kh√°c v·ªõi Account ID)
    deliveryAccountHash: process.env.CLOUDFLARE_ACCOUNT_HASH || 'qr1FX-TzU1iV5mCFgmBaYg',
    
    // Variants cho image optimization (public URLs)
    variants: {
        avatar: 'avatar',      // Avatar nh·ªè: 150x150
        thumbnail: 'thumb',    // Thumbnail: 300x300  
        medium: 'medium',      // Medium: 800x600
        original: 'public'     // Original size
    }
};

// üìÅ C·∫•u h√¨nh Multer cho file upload (memory storage)
const storage = multer.memoryStorage();

const fileFilter = (req, file, cb) => {
    console.log('üîç File filter check:', {
        fieldname: file.fieldname,
        originalname: file.originalname,
        mimetype: file.mimetype,
        size: file.size
    });

    // ‚úÖ Ch·ªâ cho ph√©p file ·∫£nh
    if (file.mimetype.startsWith('image/')) {
        cb(null, true);
    } else {
        console.log('‚ùå File type not allowed:', file.mimetype);
        cb(new Error('Ch·ªâ cho ph√©p upload file ·∫£nh (JPG, PNG, WEBP, GIF)'), false);
    }
};

// üìä Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc file (5MB - cao h∆°n AWS v√¨ Cloudflare Images free tier h·ªó tr·ª£ t·ªët)
const upload = multer({
    storage: storage,
    fileFilter: fileFilter,
    limits: {
        fileSize: 5 * 1024 * 1024 // 5MB
    }
});

/**
 * üì§ Upload ·∫£nh l√™n Cloudflare Images v√† tr·∫£ v·ªÅ Cloudflare URLs th·ª±c t·∫ø
 * @param {Object} file - File t·ª´ multer { buffer, originalname, mimetype, size }
 * @param {string} folder - Th∆∞ m·ª•c (ƒë·ªÉ ph√¢n lo·∫°i)
 * @param {string} variant - Variant Cloudflare (avatar, thumbnail, medium, etc.)
 * @returns {Object} { id, filename, avatar, original, thumbnail, medium, uploaded }
 */
const uploadToCloudflare = async (file, folder = 'avatars', variant = 'avatar') => {
    try {
        if (!file || !file.buffer) {
            throw new Error('File kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã thi·∫øu');
        }

        console.log('üì§ Uploading to Cloudflare Images:', {
            filename: file.originalname,
            size: file.size,
            folder: folder
        });

        // üì§ Upload ·∫£nh l√™n Cloudflare Images
        const formData = new FormData();
        formData.append('file', file.buffer, {
            filename: file.originalname,
            contentType: file.mimetype
        });

        // Metadata cho file
        formData.append('metadata', JSON.stringify({
            folder: folder,
            originalName: file.originalname,
            uploadedAt: new Date().toISOString()
        }));

        // Upload file
        const uploadResponse = await axios.post(CLOUDFLARE_CONFIG.imagesApiUrl, formData, {
            headers: {
                'Authorization': `Bearer ${CLOUDFLARE_CONFIG.apiToken}`,
                ...formData.getHeaders()
            }
        });

        if (!uploadResponse.data.success) {
            throw new Error(`Cloudflare API error: ${JSON.stringify(uploadResponse.data.errors)}`);
        }

        const imageData = uploadResponse.data.result;
        const imageId = imageData.id;
        
        console.log('üì§ Image uploaded to Cloudflare:', imageId);

        // ‚ö†Ô∏è API Token c√≥ v·∫•n ƒë·ªÅ - s·ª≠ d·ª•ng c√°ch kh√°c
        // Upload th√†nh c√¥ng nh∆∞ng delivery URLs kh√¥ng accessible
        
        console.log('‚ö†Ô∏è Cloudflare delivery URLs not accessible due to authentication issues');
        console.log('üîÑ Using alternative approach: Direct file serving');
        
        // üîë S·ª≠ d·ª•ng Account Hash cho delivery URLs (kh√¥ng ph·∫£i Account ID)
        const cloudflareUrls = {
            id: imageData.id,
            filename: imageData.filename,
            // S·ª≠ d·ª•ng Account Hash t·ª´ dashboard
            avatar: `https://imagedelivery.net/${CLOUDFLARE_CONFIG.deliveryAccountHash}/${imageId}/public`,
            original: `https://imagedelivery.net/${CLOUDFLARE_CONFIG.deliveryAccountHash}/${imageId}/public`,
            thumbnail: `https://imagedelivery.net/${CLOUDFLARE_CONFIG.deliveryAccountHash}/${imageId}/public`,
            medium: `https://imagedelivery.net/${CLOUDFLARE_CONFIG.deliveryAccountHash}/${imageId}/public`,
            uploaded: imageData.uploaded
        };
        
        console.log('‚úÖ Cloudflare Images upload success:', {
            id: imageData.id,
            folder: folder,
            variant: variant,
            size: file.size,
            avatarUrl: cloudflareUrls[variant] || cloudflareUrls.avatar
        });
        
        return cloudflareUrls;
        
    } catch (error) {
        console.error('‚ùå Cloudflare Images upload error:', error);
        
        if (error.response) {
            console.error('Response data:', error.response.data);
            throw new Error(`Cloudflare upload failed: ${error.response.data.errors?.[0]?.message || error.message}`);
        }
        
        throw new Error('L·ªói khi upload ·∫£nh l√™n Cloudflare: ' + error.message);
    }
};

/**
 * üîß ƒê·∫£m b·∫£o c√≥ variants v·ªõi public access
 * @param {string} imageId - Cloudflare Image ID
 */
const ensurePublicVariants = async (imageId) => {
    try {
        console.log('üîß Ensuring public variants for image:', imageId);
        
        // Danh s√°ch variants c·∫ßn t·∫°o v·ªõi public access
        const requiredVariants = [
            {
                id: 'avatar',
                options: {
                    width: 200,
                    height: 200,
                    fit: 'cover',
                    neverRequireSignedURLs: true
                }
            },
            {
                id: 'thumb', 
                options: {
                    width: 300,
                    height: 300,
                    fit: 'cover',
                    neverRequireSignedURLs: true
                }
            },
            {
                id: 'medium',
                options: {
                    width: 800,
                    height: 600,
                    fit: 'scale-down',
                    neverRequireSignedURLs: true
                }
            },
            {
                id: 'public',
                options: {
                    neverRequireSignedURLs: true
                }
            }
        ];

        // T·∫°o variants song song
        const variantPromises = requiredVariants.map(async (variant) => {
            try {
                const response = await axios.post(
                    `https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_CONFIG.accountId}/images/v1/variants`,
                    {
                        id: variant.id,
                        options: variant.options
                    },
                    {
                        headers: {
                            'Authorization': `Bearer ${CLOUDFLARE_CONFIG.apiToken}`,
                            'Content-Type': 'application/json'
                        }
                    }
                );

                if (response.data.success) {
                    console.log(`‚úÖ Variant '${variant.id}' created/updated successfully`);
                    return { variant: variant.id, success: true };
                } else {
                    console.log(`‚ö†Ô∏è Variant '${variant.id}' already exists or creation failed:`, response.data.errors?.[0]?.message);
                    return { variant: variant.id, success: false, error: response.data.errors?.[0]?.message };
                }
            } catch (error) {
                // Error 409 c√≥ th·ªÉ c√≥ nghƒ©a l√† variant ƒë√£ t·ªìn t·∫°i
                if (error.response?.status === 409) {
                    console.log(`‚úÖ Variant '${variant.id}' already exists`);
                    return { variant: variant.id, success: true, existed: true };
                }
                
                console.log(`‚ùå Failed to create variant '${variant.id}':`, error.response?.data?.errors?.[0]?.message || error.message);
                return { variant: variant.id, success: false, error: error.message };
            }
        });

        const results = await Promise.all(variantPromises);
        const successful = results.filter(r => r.success).length;
        
        console.log(`üîß Variants setup complete: ${successful}/${requiredVariants.length} successful`);
        
        return results;
        
    } catch (error) {
        console.error('‚ùå Error ensuring public variants:', error);
        // Kh√¥ng throw error ƒë·ªÉ kh√¥ng l√†m gi√°n ƒëo·∫°n upload ch√≠nh
        return [];
    }
};

/**
 * üóëÔ∏è X√≥a ·∫£nh t·ª´ Cloudflare Images
 * @param {string} imageUrl - URL ho·∫∑c ID c·ªßa ·∫£nh
 */
const deleteFromCloudflare = async (imageUrl) => {
    try {
        if (!imageUrl) return;
        
        // üîç Extract image ID t·ª´ URL
        let imageId;
        if (imageUrl.includes('imagedelivery.net')) {
            // URL format: https://imagedelivery.net/ACCOUNT_ID/IMAGE_ID/variant
            const urlParts = imageUrl.split('/');
            imageId = urlParts[urlParts.length - 2]; // ID n·∫±m tr∆∞·ªõc variant
        } else {
            // Gi·∫£ s·ª≠ l√† image ID tr·ª±c ti·∫øp
            imageId = imageUrl;
        }
        
        if (!imageId) {
            console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ extract image ID t·ª´ URL:', imageUrl);
            return;
        }
        
        // üóëÔ∏è G·ªçi Cloudflare API ƒë·ªÉ x√≥a
        const response = await axios.delete(`${CLOUDFLARE_CONFIG.imagesApiUrl}/${imageId}`, {
            headers: {
                'Authorization': `Bearer ${CLOUDFLARE_CONFIG.apiToken}`
            }
        });
        
        if (response.data.success) {
            console.log(`‚úÖ Deleted image: ${imageId}`);
        } else {
            console.error('‚ùå Failed to delete image:', response.data.errors);
        }
        
    } catch (error) {
        console.error('‚ùå Cloudflare Images delete error:', error);
        // Kh√¥ng throw error ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn qu√° tr√¨nh ch√≠nh
    }
};

/**
 * üîç Test connection t·ªõi Cloudflare Images v·ªõi Auto-Detection
 */
const testCloudflareConnection = async () => {
    try {
        // üìä Test b·∫±ng c√°ch l·∫•y th·ªëng k√™ usage
        const response = await axios.get(`https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_CONFIG.accountId}/images/v1/stats`, {
            headers: {
                'Authorization': `Bearer ${CLOUDFLARE_CONFIG.apiToken}`
            }
        });
        
        if (response.data.success) {
            console.log('‚úÖ Cloudflare Images connection successful');
            console.log('üìä Current usage:', {
                allowedCount: response.data.result.count.allowed,
                currentCount: response.data.result.count.current
            });
            return true;
        } else {
            throw new Error(JSON.stringify(response.data.errors));
        }
        
    } catch (error) {
        console.error('‚ùå Cloudflare Images connection failed:', error.message);
        
        // üîÑ Th·ª≠ auto-detect Account ID n·∫øu k·∫øt n·ªëi th·∫•t b·∫°i
        console.log('üîç Attempting to auto-detect correct Account ID...');
        const { autoDetectAccountId, updateEnvAccountId } = require('./cloudflare-detector');
        
        try {
            const correctAccountId = await autoDetectAccountId(CLOUDFLARE_CONFIG.apiToken);
            
            if (correctAccountId && correctAccountId !== CLOUDFLARE_CONFIG.accountId) {
                console.log(`üîß Found working Account ID: ${correctAccountId}`);
                console.log(`‚ö†Ô∏è Please restart the server to use the correct Account ID`);
                
                // Update .env file (optional - for next restart)
                await updateEnvAccountId(correctAccountId);
                
                return false; // Still failed this time, but will work on restart
            }
        } catch (detectionError) {
            console.error('‚ùå Auto-detection failed:', detectionError.message);
        }
        
        return false;
    }
};

/**
 * üñºÔ∏è L·∫•y th√¥ng tin chi ti·∫øt c·ªßa ·∫£nh
 * @param {string} imageId - ID c·ªßa ·∫£nh
 */
const getImageDetails = async (imageId) => {
    try {
        const response = await axios.get(`${CLOUDFLARE_CONFIG.imagesApiUrl}/${imageId}`, {
            headers: {
                'Authorization': `Bearer ${CLOUDFLARE_CONFIG.apiToken}`
            }
        });
        
        if (response.data.success) {
            return response.data.result;
        } else {
            throw new Error(JSON.stringify(response.data.errors));
        }
        
    } catch (error) {
        console.error('‚ùå Get image details error:', error);
        throw new Error('L·ªói khi l·∫•y th√¥ng tin ·∫£nh: ' + error.message);
    }
};

/**
 * üìù L·∫•y danh s√°ch ·∫£nh (cho admin)
 * @param {number} page - Trang (default: 1)
 * @param {number} per_page - S·ªë l∆∞·ª£ng m·ªói trang (default: 50, max: 100)
 */
const listImages = async (page = 1, per_page = 50) => {
    try {
        const response = await axios.get(`${CLOUDFLARE_CONFIG.imagesApiUrl}`, {
            headers: {
                'Authorization': `Bearer ${CLOUDFLARE_CONFIG.apiToken}`
            },
            params: {
                page,
                per_page: Math.min(per_page, 100)
            }
        });
        
        if (response.data.success) {
            return response.data.result;
        } else {
            throw new Error(JSON.stringify(response.data.errors));
        }
        
    } catch (error) {
        console.error('‚ùå List images error:', error);
        throw new Error('L·ªói khi l·∫•y danh s√°ch ·∫£nh: ' + error.message);
    }
};

module.exports = {
    // üì§ Main functions
    upload,
    uploadToCloudflare,
    deleteFromCloudflare,
    testCloudflareConnection,
    
    // üîß Utility functions
    getImageDetails,
    listImages,
    
    // üìã Configuration
    CLOUDFLARE_CONFIG
}; 