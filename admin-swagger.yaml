openapi: 3.0.0
info:
  title: 'Movie Backend Admin API'
  description: "API documentation cho Admin Dashboard c·ªßa ·ª©ng d·ª•ng Movie Backend\n\n**üîê ADMIN ONLY APIs:**\n\nT·∫•t c·∫£ endpoints trong file n√†y ch·ªâ d√†nh cho Admin Dashboard v√† y√™u c·∫ßu quy·ªÅn admin.\n\n**üìã CH·ª®C NƒÇNG ADMIN:**\n- ‚úÖ **Qu·∫£n l√Ω th·ªÉ lo·∫°i:** CRUD operations cho genres\n- ‚úÖ **Upload media:** Upload video/image l√™n Cloudflare\n- ‚úÖ **Th·ªëng k√™ rental:** Doanh thu, phim ph·ªï bi·∫øn\n- ‚úÖ **Qu·∫£n l√Ω cron jobs:** Start/stop background tasks\n- ‚úÖ **Video management:** Check status, troubleshoot\n- ‚úÖ **User analytics:** Interaction summaries\n\n**üö® AUTHENTICATION:**\nT·∫•t c·∫£ APIs y√™u c·∫ßu admin authentication (kh√¥ng s·ª≠ d·ª•ng userId nh∆∞ Frontend)\n\n**üõ†Ô∏è ADMIN DASHBOARD INTEGRATION:**\n- React Admin ho·∫∑c custom admin panel\n- Full CRUD operations\n- Analytics v√† reporting\n- Media management tools\n"
  version: 1.0.0
  contact:
    email: admin@movieapp.com
servers:
  - url: 'http://localhost:3003'
    description: 'Development server'
  - url: 'https://backend-app-lou3.onrender.com'
    description: 'Production server'

tags:
  - name: Admin Genre Management
    description: 'Qu·∫£n l√Ω th·ªÉ lo·∫°i phim - CRUD operations'
  - name: Admin Upload Management  
    description: 'Upload v√† qu·∫£n l√Ω media files (video/image)'
  - name: Admin Rental Management
    description: 'Th·ªëng k√™ v√† qu·∫£n l√Ω rental system'
  - name: Admin Video Management
    description: 'Qu·∫£n l√Ω video streaming v√† troubleshooting'
  - name: Admin Analytics
    description: 'Th·ªëng k√™ v√† b√°o c√°o chi ti·∫øt'

paths:
  # ============================================================================
  # ADMIN GENRE MANAGEMENT
  # ============================================================================
  /api/genres:
    get:
      tags:
        - Admin Genre Management
      summary: 'L·∫•y danh s√°ch th·ªÉ lo·∫°i (Admin Dashboard)'
      description: "API d√†nh cho Admin Dashboard ƒë·ªÉ qu·∫£n l√Ω th·ªÉ lo·∫°i.\n\n**Admin Features:**\n- Xem t·∫•t c·∫£ genres (bao g·ªìm inactive)\n- Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng phim thu·ªôc m·ªói genre\n- Qu·∫£n l√Ω parent-child relationships\n- S·∫Øp x·∫øp theo sort_order\n"
      parameters:
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum: [all, parent, active, children]
            default: all
          description: 'Lo·∫°i th·ªÉ lo·∫°i c·∫ßn l·∫•y'
        - name: parent_id
          in: query
          required: false  
          schema:
            type: string
          description: 'ID th·ªÉ lo·∫°i cha (ch·ªâ d√πng khi type=children)'
        - name: include_stats
          in: query
          required: false
          schema:
            type: boolean
            default: true
          description: 'Bao g·ªìm th·ªëng k√™ s·ªë l∆∞·ª£ng phim'
      responses:
        '200':
          description: 'L·∫•y danh s√°ch th√†nh c√¥ng'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: 
                    type: object
                    properties:
                      genres:
                        type: array
                        items:
                          $ref: '#/components/schemas/AdminGenre'
                      total: {type: integer, example: 25}
                      stats:
                        type: object
                        properties:
                          total_genres: {type: integer, example: 25}
                          active_genres: {type: integer, example: 20}
                          parent_genres: {type: integer, example: 8}
                          child_genres: {type: integer, example: 17}

  /api/genres/{id}:
    put:
      tags:
        - Admin Genre Management
      summary: 'C·∫≠p nh·∫≠t th·ªÉ lo·∫°i (Admin)'
      description: 'C·∫≠p nh·∫≠t th√¥ng tin c·ªßa m·ªôt th·ªÉ lo·∫°i'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: 'ID th·ªÉ lo·∫°i'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                genre_name:
                  type: string
                  example: 'H√†nh ƒë·ªông'
                description:
                  type: string
                  example: 'Phim h√†nh ƒë·ªông gay c·∫•n'
                poster:
                  type: string
                  example: 'https://example.com/poster.jpg'
                sort_order:
                  type: integer
                  example: 1
      responses:
        '200':
          description: 'C·∫≠p nh·∫≠t th√†nh c√¥ng'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  message: {type: string, example: 'ƒê√£ c·∫≠p nh·∫≠t th·ªÉ lo·∫°i th√†nh c√¥ng'}
                  data: {type: object, properties: {genre: {$ref: '#/components/schemas/Genre'}}}

    delete:
      tags:
        - Admin Genre Management
      summary: 'X√≥a th·ªÉ lo·∫°i (Admin)'
      description: 'X√≥a m·ªôt th·ªÉ lo·∫°i'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: 'ID th·ªÉ lo·∫°i'
      responses:
        '200':
          description: 'X√≥a th√†nh c√¥ng'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  message: {type: string, example: 'ƒê√£ x√≥a th·ªÉ lo·∫°i th√†nh c√¥ng'}
        '400':
          description: 'Kh√¥ng th·ªÉ x√≥a v√¨ c√≤n phim s·ª≠ d·ª•ng th·ªÉ lo·∫°i n√†y'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/genres/{id}/status:
    put:
      tags:
        - Admin Genre Management
      summary: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th·ªÉ lo·∫°i (Admin)'
      description: "C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa th·ªÉ lo·∫°i (activate/deactivate/toggle)."
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: 'ID th·ªÉ lo·∫°i'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [activate, deactivate]
                  example: activate
      responses:
        '200':
          description: 'C·∫≠p nh·∫≠t th√†nh c√¥ng'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  message: {type: string, example: 'ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i th·ªÉ lo·∫°i th√†nh c√¥ng'}
                  data: {type: object, properties: {genre: {$ref: '#/components/schemas/Genre'}}}

  # ============================================================================
  # ADMIN UPLOAD MANAGEMENT  
  # ============================================================================
  /api/upload/image:
    post:
      tags:
        - Admin Upload Management
      summary: 'üñºÔ∏è Upload Image to Cloudflare Images (Admin)'
      description: 'Upload ·∫£nh l√™n Cloudflare Images v·ªõi auto-optimization'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file]
              properties:
                file:
                  type: string
                  format: binary
                  description: 'Image file (JPEG/PNG/GIF/WebP, max 5MB)'
                folder:
                  type: string
                  default: general
                  description: 'Folder name for organization'
                variant:
                  type: string
                  enum: [avatar, thumbnail, medium, public]
                  default: public
                  description: 'Image variant for optimization'
      responses:
        '200':
          description: 'Image uploaded successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudflareImageResponse'
        '400':
          description: 'File kh√¥ng h·ª£p l·ªá'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/upload/video:
    post:
      tags:
        - Admin Upload Management
      summary: 'üé¨ Upload Video to Cloudflare Stream (Admin)'
      description: 'Upload video l√™n Cloudflare Stream v·ªõi auto-processing'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file, episodeId]
              properties:
                file:
                  type: string
                  format: binary
                  description: 'Video file (MP4/AVI/MOV/WebM/MKV/FLV, max 500MB)'
                episodeId:
                  type: string
                  description: 'Episode ID ƒë·ªÉ li√™n k·∫øt video'
                movieTitle:
                  type: string
                  description: 'T√™n phim (optional)'
                episodeTitle:
                  type: string
                  description: 'T√™n t·∫≠p phim (optional)'
      responses:
        '200':
          description: 'Video uploaded v√† ƒëang x·ª≠ l√Ω'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudflareVideoUploadResponse'
        '400':
          description: 'File kh√¥ng h·ª£p l·ªá'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ============================================================================
  # ADMIN VIDEO MANAGEMENT
  # ============================================================================
  /api/video-url/{videoId}/status:
    get:
      tags:
        - Admin Video Management
      summary: 'üìä Check Video Status (Admin)'
      description: 'Ki·ªÉm tra tr·∫°ng th√°i video v√† kh·∫£ nƒÉng truy c·∫≠p'
      parameters:
        - name: videoId
          in: path
          required: true
          schema:
            type: string
          example: 675a1234567890abcdef1234
      responses:
        '200':
          description: 'Th√¥ng tin tr·∫°ng th√°i video'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {videoId: {type: string}, streamUid: {type: string}, available: {type: boolean}, accessible: {type: boolean}, message: {type: string}}}
        '404':
          description: 'Video kh√¥ng t·ªìn t·∫°i'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ============================================================================
  # ADMIN RENTAL MANAGEMENT
  # ============================================================================
  /api/rentals/stats/revenue:
    get:
      tags:
        - Admin Rental Management
      summary: 'üìä Th·ªëng k√™ doanh thu (Admin)'
      description: "L·∫•y th·ªëng k√™ doanh thu theo kho·∫£ng th·ªùi gian."
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
          example: '2024-01-01'
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
          example: '2024-12-31'
      responses:
        '200':
          description: 'L·∫•y th·ªëng k√™ doanh thu th√†nh c√¥ng'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevenueStatsResponse'

  /api/rentals/stats/popular:
    get:
      tags:
        - Admin Rental Management
      summary: 'üî• Phim ƒë∆∞·ª£c thu√™ nhi·ªÅu nh·∫•t (Admin)'
      description: "L·∫•y danh s√°ch phim ƒë∆∞·ª£c thu√™ nhi·ªÅu nh·∫•t."
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: 'L·∫•y danh s√°ch phim ph·ªï bi·∫øn th√†nh c√¥ng'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PopularRentalsResponse'

  /api/rentals/cron/status:
    get:
      tags:
        - Admin Rental Management
      summary: '‚öôÔ∏è Tr·∫°ng th√°i cron jobs (Admin)'
      description: "L·∫•y tr·∫°ng th√°i t·∫•t c·∫£ cron jobs."
      responses:
        '200':
          description: 'L·∫•y tr·∫°ng th√°i cron jobs th√†nh c√¥ng'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CronStatusResponse'

  /api/rentals/cron/manual-check:
    post:
      tags:
        - Admin Rental Management
      summary: 'üîÑ Ch·∫°y manual check (Admin)'
      description: "Ch·∫°y manual check rental expiration ngay l·∫≠p t·ª©c."
      responses:
        '200':
          description: 'Manual check ho√†n th√†nh'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManualCheckResponse'

  /api/rentals/cron/{action}/{jobName}:
    put:
      tags:
        - Admin Rental Management
      summary: 'üéõÔ∏è Control cron job (Admin)'
      description: "Start/Stop m·ªôt cron job c·ª• th·ªÉ."
      parameters:
        - name: action
          in: path
          required: true
          schema:
            type: string
            enum: [start, stop]
        - name: jobName
          in: path
          required: true
          schema:
            type: string
            enum: [expiredRentalsCheck, expiringNotifications, cleanupOldRentals, dailyStatsGeneration]
      responses:
        '200':
          description: 'Control cron job th√†nh c√¥ng'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  # ============================================================================
  # ADMIN ANALYTICS
  # ============================================================================
  /api/users/{userId}/interactions/summary:
    get:
      tags:
        - Admin Analytics
      summary: 'üìä T·ªïng k·∫øt t∆∞∆°ng t√°c ng∆∞·ªùi d√πng (Admin)'
      description: "L·∫•y th·ªëng k√™ t·ªïng quan v·ªÅ ho·∫°t ƒë·ªông t∆∞∆°ng t√°c c·ªßa user."
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          example: 683d7b63d0ee4aeb15a11369
          description: 'ID c·ªßa user c·∫ßn l·∫•y th·ªëng k√™'
      responses:
        '200':
          description: 'L·∫•y th·ªëng k√™ th√†nh c√¥ng'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: {type: string, example: success}
                  data: {type: object, properties: {userId: {type: string, example: 683d7b63d0ee4aeb15a11369}, userName: {type: string, example: 'Nguy·ªÖn VƒÉn A'}, stats: {type: object, properties: {totalRatings: {type: integer, example: 25, description: 'T·ªïng s·ªë l∆∞·ª£t ƒë√°nh gi√°'}, totalLikes: {type: integer, example: 18, description: 'T·ªïng s·ªë l∆∞·ª£t th√≠ch'}, totalFavorites: {type: integer, example: 12, description: 'T·ªïng s·ªë phim y√™u th√≠ch'}, totalWatchingRecords: {type: integer, example: 45, description: 'T·ªïng s·ªë t·∫≠p ƒë√£ xem'}, completedEpisodes: {type: integer, example: 32, description: 'T·ªïng s·ªë t·∫≠p ƒë√£ ho√†n th√†nh'}, totalWatchTime: {type: integer, example: 64800, description: 'T·ªïng th·ªùi gian xem (gi√¢y)'}, totalWatchTimeFormatted: {type: string, example: '18h 0m', description: 'Th·ªùi gian xem formatted'}, avgWatchPercentage: {type: integer, example: 78, description: 'Ph·∫ßn trƒÉm xem trung b√¨nh'}}}, recentActivity: {type: array, items: {type: object, properties: {_id: {type: string, example: rating_id}, movieId: {type: string, example: movie_id}, movieTitle: {type: string, example: Spider-Man}, movieType: {type: string, example: 'Phim l·∫ª'}, poster: {type: string, example: 'https://example.com/poster.jpg'}, action: {type: string, enum: [commented, liked], example: liked}, comment: {type: string, example: 'Phim hay qu√°!', description: 'Comment c·ªßa user (c√≥ th·ªÉ null)'}, isLike: {type: boolean, example: true}, createdAt: {type: string, format: date-time, example: '2024-01-15T10:30:00Z'}}}}}}
        '404':
          description: 'Kh√¥ng t√¨m th·∫•y user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    # ============================================================================
    # ADMIN GENRE SCHEMAS
    # ============================================================================
    AdminGenre:
      type: object
      properties:
        _id: {type: string}
        genre_name: {type: string}
        description: {type: string}
        poster: {type: string}
        parent_genre: {type: string, nullable: true}
        is_parent: {type: boolean}
        is_active: {type: boolean}
        sort_order: {type: integer}
        created_at: {type: string, format: date-time}
        updated_at: {type: string, format: date-time}
        # Admin-specific fields
        movie_count: {type: integer, description: 'S·ªë l∆∞·ª£ng phim thu·ªôc th·ªÉ lo·∫°i'}
        children_count: {type: integer, description: 'S·ªë l∆∞·ª£ng th·ªÉ lo·∫°i con'}
        last_used: {type: string, format: date-time, nullable: true}

    Genre:
      type: object
      properties:
        _id: 
          type: string
          example: 683d7b63d0ee4aeb15a11369
        genre_name: 
          type: string
          example: 'H√†nh ƒë·ªông'
        description: 
          type: string
          example: 'Phim h√†nh ƒë·ªông gay c·∫•n'
        poster: 
          type: string
          example: 'https://example.com/poster.jpg'
        parent_genre: 
          type: string
          nullable: true
          example: '683d7b63d0ee4aeb15a11369'
        is_parent: 
          type: boolean
          example: true
        is_active: 
          type: boolean
          example: true
        sort_order: 
          type: integer
          example: 1
        created_at: 
          type: string
          format: date-time
        updated_at: 
          type: string
          format: date-time

    # ============================================================================
    # ADMIN UPLOAD SCHEMAS
    # ============================================================================
    CloudflareImageResponse:
      type: object
      properties:
        status: {type: string, example: success}
        message: {type: string, example: '·∫¢nh ƒë√£ ƒë∆∞·ª£c upload th√†nh c√¥ng l√™n Cloudflare Images'}
        data:
          type: object
          properties:
            id: {type: string, example: '2cdc28f0-017a-49c4-9ed7-87056c83901f'}
            filename: {type: string, example: 'avatar.jpg'}
            uploaded: {type: string, format: date-time}
            urls:
              type: object
              properties:
                original: {type: string}
                avatar: {type: string}
                thumbnail: {type: string}
                medium: {type: string}
            fileSize: {type: number, example: 1024000}
            dimensions: 
              type: object
              properties:
                width: {type: integer}
                height: {type: integer}

    CloudflareVideoUploadResponse:
      type: object
      properties:
        status: {type: string, example: success}
        message: {type: string, example: 'Video ƒë√£ ƒë∆∞·ª£c upload th√†nh c√¥ng l√™n Cloudflare Stream'}
        data:
          type: object
          properties:
            episodeId: {type: string}
            streamUid: {type: string}
            uploadStatus: {type: string, enum: [ready, inprogress, error]}
            playback: {type: object, nullable: true}
            thumbnail: {type: string, nullable: true}
            processingStatus: {type: string}
            fileSize: {type: number}
            duration: {type: number, nullable: true}
            uploadProgress: {type: number}

    # ============================================================================
    # ADMIN ANALYTICS SCHEMAS  
    # ============================================================================
    RevenueStatsResponse:
      type: object
      properties:
        success: {type: boolean, example: true}
        message: {type: string, example: 'L·∫•y th·ªëng k√™ doanh thu th√†nh c√¥ng'}
        data:
          type: object
          properties:
            summary:
              type: object
              properties:
                totalRevenue: {type: number, example: 5420000}
                totalRentals: {type: number, example: 287}
                averageRevenuePerRental: {type: number, example: 18884}
            dailyStats:
              type: array
              items:
                type: object
                properties:
                  date: {type: string, format: date, example: '2024-01-15'}
                  revenue: {type: number, example: 125000}
                  rentals: {type: number, example: 8}

    PopularRentalsResponse:
      type: object
      properties:
        success: {type: boolean, example: true}
        message: {type: string, example: 'L·∫•y danh s√°ch phim ph·ªï bi·∫øn th√†nh c√¥ng'}
        data:
          type: array
          items:
            type: object
            properties:
              movieId: {type: string}
              title: {type: string}
              poster: {type: string}
              totalRentals: {type: number}
              revenue: {type: number}

    CronStatusResponse:
      type: object
      properties:
        success: {type: boolean, example: true}
        message: {type: string, example: 'L·∫•y tr·∫°ng th√°i cron jobs th√†nh c√¥ng'}
        data:
          type: object
          properties:
            expiredRentalsCheck:
              type: object
              properties:
                running: {type: boolean, example: false}
                scheduled: {type: boolean, example: false}

    ManualCheckResponse:
      type: object
      properties:
        success: {type: boolean, example: true}
        message: {type: string, example: 'Manual check ho√†n th√†nh'}
        data:
          type: object
          properties:
            success: {type: boolean, example: true}
            expiredCount: {type: number, example: 3}
            expiringCount: {type: number, example: 5}

    # ============================================================================
    # COMMON SCHEMAS
    # ============================================================================
    ErrorResponse:
      type: object
      properties:
        status: {type: string, example: error}
        message: {type: string}
        error_code: {type: string, nullable: true}
        details: {type: object, nullable: true}

    SuccessResponse:
      type: object
      properties:
        status: {type: string, example: success}
        message: {type: string} 